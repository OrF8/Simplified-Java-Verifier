// This test checks compatability of method calls with different types
void boolMethod(boolean b) {
	return;
}

void doubleMethod(double d) {
	return;
}

void intMethod(int i) {
	return;
}

void stringMethod(String s){
	return;
}

void charMethod(char c){
	return;
}

void emptyParams(){
	return;
}



// This method calls the other methods and check for compatibility
void callerMethod(){
	int x;
	int y = 05;
	double d = -.070;
	boolean bool = true;
	boolean int_bool = 5;
	String s = "HOOP";
	String emptyS = "";
	char c = '!';

// mult params, should work
	mult_params(bool, d, s, c);
	
// try to call with compatible type but uninitialized var (shouldn't work)
//	intMethod(x);
	
// try to call with incompatible type and uninitialized var (check what fails first)
//	stringMethod(x);

// try to call int method with boolean that was given an int (shouldn't work)
//	intMethod(int_bool);
	
// check that boolMethod accepts all valid bool types (should accept all)
	boolMethod(y);
	boolMethod(d);
	boolMethod(bool);

// check that stringMethod accepts only strings, including empty one (should work)
	stringMethod(s);
	stringMethod(emptyS);
	
// check that other methods do not accept char (should fail)
//	stringMethod(c);
//	intMethod(c);
//	boolMethod(c);
	
// call with unknown variable
//	stringMethod(pipi);
	
	return;
	
}

// This method calls with incompatible number of elements or types, should always fail
void wrong_param_size() {
	boolean b = true;
	double d = 07;
	String s = "googoogaga";
	char c = 'p';
	int x = 5;

// call a method that expects 0 but gets more.
//	emptyParams(x);
//	emptyParams(x, b, c);

// size fits, but types do not (increasingly getting better)
//	mult_params(s, c, d, b);
//	mult_params(d, c, d, b);
//	mult_params(d, x, d, b);
//	mult_params(d, x, s, b);
// This should work:
	mult_params(d, x, s, c);
	
	return;
}

void mult_params(boolean b, double d, String s, char c) {
	return;
}